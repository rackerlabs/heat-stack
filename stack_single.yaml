heat_template_version: 2013-05-23

description: |
  Sample Heat template that creates a server, injects a simple
  BASH script through cloud-init that installs Chef-client and
  joins a Chef Server.

parameters:
  name:
    label: Server Name
    description: Server Hostname
    type: string
    default: server
    constraints:
    - length:
        min: 1
        max: 64
    - allowed_pattern: "^[a-zA-Z0-9]([a-zA-Z0-9._-])*$"
      description: |
        Must begin with a letter or number and be alphanumeric or '-' and '.'

  image:
    label: Server Image
    description: |
      Optional: Server image used for the server created
      as a part of this deployment.
    type: string
    default: Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM)
    constraints:
    - allowed_values:
      - CentOS 6.5
      - CentOS 6.5 (PVHVM)
      - CentOS 7 (PVHVM)
      - Debian 6.06 (Squeeze)
      - Debian 7 (Wheezy) (PVHVM)
      - Red Hat Enterprise Linux 6.5
      - Red Hat Enterprise Linux 6.5 (PVHVM)
      - Ubuntu 12.04 LTS (Precise Pangolin)
      - Ubuntu 12.04 LTS (Precise Pangolin) (PVHVM)
      - Ubuntu 14.04 LTS (Trusty Tahr)
      - Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM)
      description: Must be a supported operating system.

  flavor:
    label: Server Flavor
    description: |
      Optional: Rackspace Cloud Server flavor to use. The size is based on the
      amount of RAM for the provisioned server.
    type: string
    default: 1 GB Performance
    constraints:
    - allowed_values:
      - 1 GB Performance
      - 2 GB Performance
      - 4 GB Performance
      - 8 GB Performance
      - 15 GB Performance
      - 30 GB Performance
      - 512MB Standard Instance
      - 1GB Standard Instance
      - 2GB Standard Instance
      - 4GB Standard Instance
      - 8GB Standard Instance
      - 15GB Standard Instance
      - 30GB Standard Instance
      description: |
        Must be a valid Rackspace Cloud Server flavor for the region you have
        selected to deploy into.

  role:
    label: Chef Role
    description: |
      Optional: Chef Role. Will default to "_default"
    type: string
    default: _default

  chef_server_url:
    label: Chef Server URL
    description: |
       Optional: Chef Server URL. Defaults to None, but the BASH script will
       infer the Managed Chef URL from the organization
    type: string
    default: ''

  chef_version:
    label: version
    description: |
      Optional: Version of Chef Client to use
    type: string
    default: 11.16.0

  organization:
    label: Organization
    description: |
      Required: Chef organization
    type: string
    default:

  chef_env:
    label: Chef Environment
    description: |
      Required: Chef Environment
    type: string
    default: _default

  validation_key:
    label: Validation Key
    description: |
      Required: chef-client will attempt to use the private key assigned to the
      chef-validator, located in /etc/chef/validation.pem. If, for any reason,
      the chef-validator is unable to make an authenticated request to the
      Chef server, the initial chef-client run will fail.
    type: string
    default:

  ssh_keyname:
    type: string

resources:
  server:
    type: "Rackspace::Cloud::Server"
    properties:
      name: { get_param: name }
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_param: ssh_keyname }
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            LOGFILE="/var/log/cloud-init-chef-bootstrap.setup.$$"
            # Initial timestamp and debug information
            date > $LOGFILE
            echo "Starting cloud-init bootstrap" >> $LOGFILE
            echo "chef_version parameter: %chef_version%" >> $LOGFILE
            echo "organization parameter: %organization%" >> $LOGFILE
            echo "role parameter: %role%" >> $LOGFILE
            # Infer the Chef Server's URL if none was passed
            CHEFSERVERURL='%chef_server_url%'
            if [ -n $CHEFSERVERURL ]; then
              echo "chef_server_url parameter: not passed" >> $LOGFILE
              CHEFSERVERURL="https://api.opscode.com/organizations/%organization%"
            else
              echo "chef_server_url parameter: $CHEFSERVERURL" >> $LOGFILE
              CHEFSERVERURL="%chef_server_url%"
            fi
            # Store the validation key in /etc/chef/validator.pem
            echo "Storing validation key in /etc/chef/validator.pem"
            mkdir /etc/chef /var/log/chef &>/dev/null
            echo %validation_key% | base64 --decode > /etc/chef/validator.pem
            # Cook a minimal client.rb for getting the chef-client registered
            echo "Creating a minimal /etc/chef/client.rb" >> $LOGFILE
            touch /etc/chef/client.rb
            cat >/etc/chef/client.rb <<EOF
              log_level        :info
              log_location     STDOUT
              chef_server_url  "$CHEFSERVERURL"
              validation_key         "/etc/chef/validator.pem"
              validation_client_name "%organization%-validator"
              environment      "%chef_env%"
            EOF
            # Cook the first boot file
            echo "Creating a minimal /etc/chef/first-boot.json" >> $LOGFILE
            touch /etc/chef/first-boot.json
            cat >/etc/chef/first-boot.json <<EOF
            {"run_list":["role[%role%]"]}
            EOF
            # Install chef-client through omnibus (if not already available)
            if [ ! -f /usr/bin/chef-client ]; then
              echo "Installing chef using omnibus installer" >> $LOGFILE
              # adjust to install the latest vs. a particular version
              curl -L https://www.opscode.com/chef/install.sh | sudo bash -s -- -v %chef_version% &>$LOGFILE
              echo "Installation of chef complete" >> $LOGFILE
            fi
            # Kick off the first chef run
            echo "Executing the first chef-client run"
            if [ -f /usr/bin/chef-client ]; then
              echo "First Chef client run" >> $LOGFILE
              /usr/bin/chef-client -j /etc/chef/first-boot.json
            fi
            # Script complete. Log final timestamp
            date >> $LOGFILE
          params:
            "%chef_server_url%": { get_param: chef_server_url }
            "%chef_version%": { get_param: chef_version }
            "%organization%": { get_param: organization }
            "%chef_env%": { get_param: chef_env }
            "%role%": { get_param: role }
            "%validation_key%": { get_param: validation_key }

outputs:
  public_ip:
    description: Server IP
    value: { get_attr: [server, accessIPv4] }

  private_ip:
    description: Server IP
    value: { get_attr: [server, privateIPv4] }
